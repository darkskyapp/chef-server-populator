##### Example bootstrap template #####
# This bootstrap will create a new erchef server and restore it using
# a backup of your existing chef server. It will automatically
# disable the webui, restore the entire chef database, and reset the public
# key for the local admin user. It will also restore all the cookbooks
# from the previous/existing chef server, so all cookbook versions will be
# available. Finally, it will register itself with itself. How meta.
#
# This expects two remote files, one a is pg_dump of your existing chef server
# database, and one is a tarball of the bookshelf files from that chef server.
#
# NOTE: It uses the node IP address for configuration, rather than the
# FQDN. You can see it being done down there in the json building. The
# example is based on eth0. Modify or remove as needed.

sudo bash -c '

curl -L https://www.opscode.com/chef/install.sh | bash
mkdir -p /var/chef/cache /var/chef/cookbooks/chef-server /var/chef/cookbooks/chef-server-populator
wget -qO- https://github.com/opscode-cookbooks/chef-server/archive/master.tar.gz | tar xvzC /var/chef/cookbooks/chef-server --strip-components=1
wget -qO- https://github.com/hw-cookbooks/chef-server-populator/tarball/master | tar xvzC /var/chef/cookbooks/chef-server-populator --strip-components=1

mkdir -p /tmp/chef-server-setup
(
cat <<'EOP'
<%= IO.read(Chef::Config[:validation_key]) %>
EOP
) > /tmp/chef-server-setup/validation.pem
(
cat <<'EOP'
<%= %x{openssl rsa -in #{Chef::Config[:validation_key]} -pubout} %>
EOP
) > /tmp/chef-server-setup/validation_pub.pem
(
cat <<'EOP'
<%= %x{openssl rsa -in #{Chef::Config[:client_key]} -pubout} %>
EOP
) > /tmp/chef-server-setup/client_key_pub.pem

mkdir -p /etc/chef
cp /tmp/chef-server-setup/validation.pem /etc/chef/validation.pem
chmod 600 /etc/chef/validation.pem

IPADDR=`curl http://169.254.169.254/latest/meta-data/public-ipv4`
if [ $? -ne 0 ]
  then
    IPADDR=`ip addr show eth0 | grep "inet " | awk -F" " '\''{print $2}'\'' | sed -e "s/\/..//"`
fi

(
echo "
{
  \"chef-server\": {
     \"version\": \"11.0.8\",
    \"configuration\": {
      \"chef_server_webui\": {
        \"enable\": false
      }
    }
  },
  \"chef_server_populator\": {
    \"restore\": {
      \"file\": \"<path_to_chef_db_dump>\",
      \"data\": \"<path_to_chef_data_tarball>\"
    },
    \"clients\": {
      \"<%= Chef::Config[:node_name] %>\": \"client_key_pub.pem\",
      \"<%= Chef::Config[:validation_client_name] %>\": \"validation_pub.pem\"
    },
    \"servername_override\": \"${IPADDR}\",
    \"base_path\": \"/tmp/chef-server-setup\"
  },
  \"run_list\": [ \"recipe[chef-server]\", \"recipe[ds_chef_server_populator]\" ]
}
"
) > /tmp/chef-server.json

chef-solo -j /tmp/chef-server.json

rm -rf /tmp/chef-server-setup

(
cat <<'EOP'
log_level        :info
log_location     STDOUT
chef_server_url  "https://127.0.0.1"
validation_client_name "<%= Chef::Config[:validation_client_name] %>"
force_logger     true
<% if @config[:chef_node_name] == nil %>
# Using default node name
<% else %>
node_name "<%= @config[:chef_node_name] %>"
<% end %>
EOP
) > /etc/chef/client.rb

(
echo "
{
  \"chef_server\": {
    \"chef_server_webui\": {
      \"enable\": false
    }
  },
  \"chef_server_populator\": {
    \"servername_override\": \"${IPADDR}\"
  },
  \"run_list\": [ \"recipe[ds_chef_server_populator]\"  ]
}
"
) > /etc/chef/first-boot.json

<%= start_chef %>
echo "**********************************************"
echo "* NOTE: Update chef_server_url in knife.rb!  *"
echo "*   IP: ${IPADDR}                       *"
echo "**********************************************"
'
